import path from 'path';

import {ReviewTask} from '../../src/review';
import {readDiffFile} from '../utils';

export async function mr1032(): Promise<ReviewTask> {
  const diff = await readDiffFile(path.join(__dirname, './mr1032.diff'));
  return {
    title: 'feat(contracts): implement PrpVoucherGrantor smart contract',
    description: `
    The PRPGrantor smart contract is designed to facilitate rewarding users
    with Panther Protocol rewards (nominated in PRPs) other than rewards
    generated by/within MASP transactions. Reward claims to be generated and
    utilised by users. The contract maintains a mapping of claimable PRP
    balances associated with individual secrets. It accumulates generated
    claims associated with the same secret. A claim “utilisation” results in
    increasing the PRP balance inside the zAccount of a user by the amount
    of the claim. To utilise a claim (it’s entire balance) associated with a
    secret, a user must provide proof of zAccount ownership and knowledge of
    the secret. The contract supports a list of predefined types of rewards
    (rewardable actions), such as vesting ZKP to AMM and fee exchanging,
    with specific reward terms. The contract owner has the authority to
    update these terms, and the smart contract is upgradable to extend the
    action list as needed upon DAO voting.
  `,
    changedFiles: [
      'contracts/contracts/protocol/interfaces/IVerifier.sol',
      'contracts/contracts/protocol/PrpVoucherGrantor.sol',
      'contracts/test/protocol/PrpVoucherGrantor.test.ts',
    ],
    diff,
  };
}
